#include <iostream>
#include <vector>
#include <algorithm>

#include "spectra.hpp"
#include "signal.hpp"
#include "harmonicGenerator.hpp"

#include <fann.h>

using namespace tst;



int main(int argc, char *argv[])
{
    std::srand(std::time(0));

    Spectra spectra;
    spectra.setup(
                50.0, 3000.0, 500,

                30.0, 10.0, 10.0,
                10);

    Signal signal;
    signal.setup(8000, 8000);

    std::vector<HarmonicGenerator *> harmonicGenerators;
    std::random_device src;

    {
        HarmonicGeneratorRandomLaw frequencyLaw, amplitudeLaw;

        frequencyLaw._min = 50;
        frequencyLaw._max = 3000;
        frequencyLaw._timeChangeGenerator = new RandomGeneratorUniform(src, 0.025, 0.01);
        frequencyLaw._valueChangeGenerator = new RandomGeneratorUniform(src, 0, 800);

        amplitudeLaw._min = 0;
        amplitudeLaw._max = 0.01;
        amplitudeLaw._timeChangeGenerator = new RandomGeneratorUniform(src, 0.125, 0.05);
        amplitudeLaw._valueChangeGenerator = new RandomGeneratorUniform(src, 0, 0.005);


        for(std::size_t i(0); i<100; ++i)
        {
            harmonicGenerators.push_back(new HarmonicGenerator);
            harmonicGenerators.back()->setup(frequencyLaw, amplitudeLaw);
        }
    }

    fann *nn = fann_create_from_file("ann.net");
    if(!nn)
    {
        return EXIT_FAILURE;
    }

    std::vector<real> nnInput(fann_get_num_input(nn));
    std::vector<real> nnOutput(fann_get_num_output(nn));

    std::ofstream outTrainData;

    std::size_t otdIndex = 0;
    std::size_t otdLineIndex = 0;
    const std::size_t otdLinesAmount = 100000;

    for(std::size_t frame(1); ; ++frame)
    {
        real time = 0.001 * frame;
//        if(time > 10)
//        {
//            break;
//        }

        spectra.stepTo(time);
        signal.stepTo(time);

        for( HarmonicGenerator *hg : harmonicGenerators)
        {
            hg->stepTo(time);
            hg->flush(spectra);
            hg->flush(signal);
        }

//        if(time > 1.0 && !(frame % 100))
//        {
//            if(!outTrainData)
//            {
//                outTrainData.close();
//                outTrainData.clear();

//                char fname[1024];
//                sprintf(fname, "otd/100k_%06d.dat", int(otdIndex));
//                outTrainData.open(fname);

//                outTrainData<<otdLinesAmount<<" "<<1000<<" "<<100<<std::endl;

//                otdIndex++;
//                otdLineIndex = 0;

//                std::cout<<time<<", "<<otdIndex<<std::endl;
//            }

//            for(std::size_t i(0); i<1000; ++i)
//            {
//                outTrainData<<signal.data(signal.dataSize()-1-i)<<' ';
//            }
//            outTrainData<<'\n';

//            for(std::size_t i(0); i<100; ++i)
//            {
//                outTrainData<<spectra.data(250, i)<<' ';
//            }
//            outTrainData<<'\n';

//            otdLineIndex++;
//            if(otdLineIndex > otdLinesAmount)
//            {
//                outTrainData.close();
//            }
//        }


        if(time > 1.0 && !(frame % 100))
        {
            assert(nnInput.size() <= signal.dataSize());

            {
                //std::stringstream ss("0 0.0323838 0.0323838 0.0323838 0.0323838 0.100141 0.100141 0.100141 0.100141 0.0944214 0.0944214 0.0944214 0.00861992 0.00861992 0.00861992 0.00861992 0.00861992 -0.00986121 -0.00986121 -0.00986121 -0.00986121 -0.0788583 -0.0788583 -0.0788583 -0.0788583 -0.0720283 -0.0720283 -0.0720283 -0.0204574 -0.0204574 -0.0204574 -0.0204574 -0.0204574 0.0116689 0.0116689 0.0116689 0.0116689 0.0624512 0.0624512 0.0624512 -0.912445 0.0623355 0.0623355 0.0623355 -0.0226354 -0.0226354 -0.0226354 -0.0226354 0.577548 -0.0541881 -0.0541881 -0.0541881 -0.0541881 0.0505526 0.0505526 0.0505526 -0.808464 0.0594015 0.0594015 0.0594015 -0.0862817 -0.0862817 -0.0862817 -0.0862817 1.08287 -0.0633699 -0.0633699 -0.0633699 -0.0633699 0.0596904 0.0596904 0.0596904 -0.31599 -0.0116033 -0.0116033 -0.0116033 0.00599128 0.00599128 0.00599128 0.00599128 -0.156735 0.0148377 0.0148377 0.0148377 0.0148377 -0.0708074 -0.0708074 -0.0708074 0.657909 -0.0224682 -0.0224682 -0.0224682 -0.036316 -0.036316 -0.036316 -0.036316 0.144434 0.01318 0.01318 0.01318 0.01318 0.0132167 0.0132167 0.0132167 -0.488697 0.0510282 0.0510282 0.0510282 0.00720332 0.00720332 0.00720332 0.00720332 -0.140339 0.011682 0.011682 0.011682 0.011682 0.034513 0.034513 0.034513 -0.263183 0.00359202 0.00359202 0.00359202 -0.0251897 -0.0251897 -0.0251897 -0.0251897 0.308049 -0.0174648 -0.0174648 -0.0174648 -0.0174648 -0.131638 -0.131638 -0.131638 1.62704 -0.0934721 -0.0934721 -0.0934721 0.0147227 0.0147227 0.0147227 0.0147227 -0.290311 0.0243217 0.0243217 0.0243217 0.0243217 -0.0533196 -0.0533196 -0.0533196 0.76315 -0.0511885 -0.0511885 -0.0511885 0.0295072 0.0295072 0.0295072 0.0295072 0.116271 -0.040613 -0.040613 -0.040613 -0.040613 -0.0580531 -0.0580531 -0.0580531 0.695111 -0.0383519 -0.0383519 -0.0383519 -0.0183873 -0.0183873 -0.0183873 -0.0183873 -0.0677686 0.0247082 0.0247082 0.0247082 0.0247082 0.0268925 0.0268925 0.0268925 -0.728991 0.0698605 0.0698605 0.0698605 0.0288841 0.0288841 0.0288841 0.0288841 -0.346675 0.0191875 0.0191875 0.0191875 0.0191875 0.261333 0.261333 0.261333 0.261333 0.22283 0.22283 0.22283 0.0182443 0.0182443 0.0182443 0.0182443 0.0182443 0.0345487 0.0345487 0.0345487 0.0345487 -0.0125763 -0.0125763 -0.0125763 -0.0125763 0.0406055 0.0406055 0.0406055 0.0291782 0.0291782 0.0291782 0.0291782 0.0291782 0.0516997 0.0516997 0.0516997 0.0516997 -0.0181773 -0.0181773 -0.0181773 -0.0181773 -0.0605584 -0.0605584 -0.0605584 -0.0379057 -0.0379057 -0.0379057 -0.0379057 -0.0379057 -0.0518936 -0.0518936 -0.0518936 -0.0518936 -0.0293942 -0.0293942 -0.0293942 -0.0293942 -0.0512047 -0.0512047 -0.0512047 -0.0382649 -0.0382649 -0.0382649 -0.0382649 -0.0382649 -0.0208678 -0.0208678 -0.0208678 -0.0208678 -0.0259118 -0.0259118 -0.0259118 -0.0259118 -0.0418348 -0.0418348 -0.0418348 0.0645304 0.0645304 0.0645304 0.0645304 0.0645304 0.0483361 0.0483361 0.0483361 0.0483361 -0.0720028 -0.0720028 -0.0720028 -0.0720028 -0.0855452 -0.0855452 -0.0855452 0.0493335 0.0493335 0.0493335 0.0493335 0.0493335 0.00833857 0.00833857 0.00833857 0.00833857 0.0245305 0.0245305 0.0245305 0.0245305 0.0235263 0.0235263 0.0235263 -0.0320509 -0.0320509 -0.0320509 -0.0320509 -0.0320509 0.0211831 0.0211831 0.0211831 0.0211831 0.0857339 0.0857339 0.0857339 0.0857339 0.0669049 0.0669049 0.0669049 -0.0779956 -0.0779956 -0.0779956 -0.0779956 -0.0779956 -0.103745 -0.103745 -0.103745 -0.103745 0.0380301 0.0380301 0.0380301 0.0380301 0.0100892 0.0100892 0.0100892 -0.0141018 -0.0141018 -0.0141018 -0.0141018 -0.0141018 0.00277263 0.00277263 0.00277263 0.00277263 -0.0414223 -0.0414223 -0.0414223 -0.0414223 0.0197649 0.0197649 0.0197649 -0.013747 -0.013747 -0.013747 -0.013747 -0.013747 0.0168892 0.0168892 0.0168892 0.0168892 -0.0787227 -0.0787227 -0.0787227 -0.0787227 -0.0462337 -0.0462337 -0.0462337 -0.0746326 -0.0746326 -0.0746326 -0.0746326 1.07352 -0.0723306 -0.0723306 -0.0723306 -0.0723306 -0.0949307 -0.0949307 -0.0949307 1.37326 -0.0929977 -0.0929977 -0.0929977 -0.0314322 -0.0314322 -0.0314322 -0.0314322 0.433815 -0.0281195 -0.0281195 -0.0281195 -0.0281195 0.0360697 0.0360697 0.0360697 -0.190655 -0.00704891 -0.00704891 -0.00704891 0.00953051 0.00953051 0.00953051 0.00953051 -0.363701 0.0382431 0.0382431 0.0382431 0.0382431 0.0200849 0.0200849 0.0200849 -0.083247 -0.0068584 -0.0068584 -0.0068584 -0.0372167 -0.0372167 -0.0372167 -0.0372167 0.572489 -0.0408257 -0.0408257 -0.0408257 -0.0408257 0.0182892 0.0182892 0.0182892 -0.322837 0.025375 0.025375 0.025375 -0.0950546 -0.0950546 -0.0950546 -0.0950546 0.862195 -0.0274734 -0.0274734 -0.0274734 -0.0274734 0.0412214 0.0412214 0.0412214 -0.581965 0.0385465 0.0385465 0.0385465 0.045782 0.045782 0.045782 0.045782 -0.322298 0.00133225 0.00133225 0.00133225 0.00133225 -0.0879743 -0.0879743 -0.0879743 0.867849 -0.0343711 -0.0343711 -0.0343711 0.0783701 0.0783701 0.0783701 0.0783701 -0.921009 0.0495504 0.0495504 0.0495504 0.0495504 -0.0595946 -0.0595946 -0.0595946 0.727831 -0.0411959 -0.0411959 -0.0411959 0.00738122 0.00738122 0.00738122 0.00738122 -0.0722502 0.00281158 0.00281158 0.00281158 0.00281158 -0.0109153 -0.0109153 -0.0109153 -0.349083 0.0542008 0.0542008 0.0542008 -0.0465625 -0.0465625 -0.0465625 -0.0465625 0.450895 -0.0171121 -0.0171121 -0.0171121 -0.0171121 -0.0270204 -0.0270204 -0.0270204 0.0495127 0.0172242 0.0172242 0.0172242 -0.0230673 -0.0230673 -0.0230673 -0.0230673 0.739503 -0.0745418 -0.0745418 -0.0745418 -0.0745418 0.00265272 0.00265272 0.00265272 0.103615 -0.0155759 -0.0155759 -0.0155759 -0.0218958 -0.0218958 -0.0218958 -0.0218958 0.516971 -0.0470792 -0.0470792 -0.0470792 -0.0470792 0.0689578 0.0689578 0.0689578 0.0689578 0.032072 0.032072 0.032072 -0.0155463 -0.0155463 -0.0155463 -0.0155463 -0.0155463 0.00735627 0.00735627 0.00735627 0.00735627 -0.00816168 -0.00816168 -0.00816168 -0.00816168 -0.0385651 -0.0385651 -0.0385651 0.0094309 0.0094309 0.0094309 0.0094309 0.0094309 -0.0344692 -0.0344692 -0.0344692 -0.0344692 -0.00703614 -0.00703614 -0.00703614 -0.00703614 -0.0434274 -0.0434274 -0.0434274 -0.0590333 -0.0590333 -0.0590333 -0.0590333 -0.0590333 0.0502716 0.0502716 0.0502716 0.0502716 -0.0593587 -0.0593587 -0.0593587 -0.0593587 -0.0190696 -0.0190696 -0.0190696 -0.00589089 -0.00589089 -0.00589089 -0.00589089 -0.00589089 -0.0419497 -0.0419497 -0.0419497 -0.0419497 0.0413322 0.0413322 0.0413322 0.0413322 0.00316177 0.00316177 0.00316177 0.00313563 0.00313563 0.00313563 0.00313563 0.00313563 0.0616025 0.0616025 0.0616025 0.0616025 -0.00367838 -0.00367838 -0.00367838 -0.00367838 -0.0160732 -0.0160732 -0.0160732 0.00535905 0.00535905 0.00535905 0.00535905 0.00535905 0.00213697 0.00213697 0.00213697 0.00213697 -0.0331899 -0.0331899 -0.0331899 -0.0331899 -0.0183017 -0.0183017 -0.0183017 -0.00640582 -0.00640582 -0.00640582 -0.00640582 -0.00640582 -0.0261286 -0.0261286 -0.0261286 -0.0261286 0.0203473 0.0203473 0.0203473 0.0203473 0.0565969 0.0565969 0.0565969 0.04215 0.04215 0.04215 0.04215 0.04215 0.014938 0.014938 0.014938 0.014938 0.0182505 0.0182505 0.0182505 0.0182505 -0.0449837 -0.0449837 -0.0449837 0.026661 0.026661 0.026661 0.026661 0.026661 0.124149 0.124149 0.124149 0.124149 -0.0762754 -0.0762754 -0.0762754 -0.0762754 -0.0207972 -0.0207972 -0.0207972 -0.0614665 -0.0614665 -0.0614665 -0.0614665 -0.0614665 0.0188763 0.0188763 0.0188763 0.0188763 -0.0538511 -0.0538511 -0.0538511 -0.0538511 -0.0881797 -0.0881797 -0.0881797 0.212024 0.212024 0.212024 0.212024 -2.37572 0.119208 0.119208 0.119208 0.119208 0.00475613 0.00475613 0.00475613 -0.256074 0.0286302 0.0286302 0.0286302 -0.0130292 -0.0130292 -0.0130292 -0.0130292 -0.263639 0.0451072 0.0451072 0.0451072 0.0451072 0.0203158 0.0203158 0.0203158 0.23912 -0.0483227 -0.0483227 -0.0483227 -0.0464544 -0.0464544 -0.0464544 -0.0464544 0.436269 -0.0153342 -0.0153342 -0.0153342 -0.0153342 0.0249608 0.0249608 0.0249608 -0.290613 0.0154327 0.0154327 0.0154327 0.0062186 0.0062186 0.0062186 0.0062186 -0.340574 0.0381709 0.0381709 0.0381709 0.0381709 0.0149107 0.0149107 0.0149107 -0.357052 0.0327006 0.0327006 0.0327006 -0.00621129 -0.00621129 -0.00621129 -0.00621129 0.138026 -0.0122511 -0.0122511 -0.0122511 -0.0122511 -0.0772351 -0.0772351 -0.0772351 1.40571 -0.112581 -0.112581 -0.112581 0.0404988 0.0404988 0.0404988 0.0404988 -0.290004 0.00180552 0.00180552 0.00180552 0.00180552 0.0301166 0.0301166 0.0301166 0.366263 -0.0731434 -0.0731434 -0.0731434 -0.0161806 -0.0161806 -0.0161806 -0.0161806 0.358511 -0.03178 -0.03178 -0.03178 -0.03178 0.0326725 0.0326725 0.0326725 -0.218421 -0.000532504 -0.000532504 -0.000532504 -0.0262691 -0.0262691 -0.0262691 -0.0262691 0.774483 -0.0762272 -0.0762272 -0.0762272 -0.0762272 0.0277613 0.0277613 0.0277613 -0.728146 0.0689949 0.0689949 0.0689949 -0.0169945 -0.0169945 -0.0169945 -0.0169945 -0.106876 0.0284993 0.0284993 0.0284993 0.0284993 -0.0288513 -0.0288513 -0.0288513 0.309418 -0.0144471 -0.0144471 -0.0144471 0.0644121 0.0644121 0.0644121 0.0644121 -0.592565 0.019681 0.019681 0.019681 0.019681 -0.02193 -0.02193 -0.02193 0.469296 -0.040947 -0.040947 -0.040947 -0.00668337 -0.00668337 -0.00668337 -0.00668337 -0.00668337 0.0578872 0.0578872 0.0578872 0.0578872 -0.0334279 -0.0334279 -0.0334279 -0.0334279 -0.0078496 -0.0078496 -0.0078496 0.014353 0.014353 0.014353 0.014353 0.014353 0.0453484 0.0453484 0.0453484 0.0453484 -0.080098 -0.080098 -0.080098 -0.080098 -0.0418024 -0.0418024 -0.0418024 -0.0339239 -0.0339239 -0.0339239 -0.0339239 -0.0339239 -0.00705552 -0.00705552 -0.00705552 -0.00705552 0.0381763 0.0381763 0.0381763 0.0381763 0.0317377 0.0317377 0.0317377 -0.010309 -0.010309 -0.010309 -0.010309 -0.010309 0.083119 0.083119 0.083119 0.083119 -0.0116785 -0.0116785 -0.0116785 -0.0116785 -0.0403458 -0.0403458 -0.0403458 -0.00771285 -0.00771285 -0.00771285 -0.00771285 -0.00771285 -0.00789309 -0.00789309 -0.00789309 -0.00789309 0.00147365 0.00147365 0.00147365 0.00147365 0.0168703 0.0168703 0.0168703 -0.0633897 -0.0633897 -0.0633897 -0.0633897 -0.0633897 -0.0220799 -0.0220799 -0.0220799 -0.0220799 0.0303878 0.0303878 0.0303878 0.0303878 -0.00601099 -0.00601099 -0.00601099 0.0380217 0.0380217 0.0380217 0.0380217 0.0380217 0.0995282 0.0995282 0.0995282 0.0995282 0.06749 0.06749 0.06749 0.06749 0.0365276 0.0365276 0.0365276 -0.00919639 -0.00919639 -0.00919639 -0.00919639 -0.00919639 0.047129 0.047129 0.047129 0.047129 0.00529028 0.00529028 0.00529028 0.00529028 0.0163062 0.0163062 0.0163062 0.0580395 0.0580395 0.0580395 0.0580395 0.0580395 0.023771 0.023771 0.023771 0.023771 0.00312886 0.00312886 0.00312886 ");
                for(std::size_t i(0); i<nnInput.size(); ++i)
                {
                    nnInput[i] = signal.data(signal.dataSize()-1-i);
                    //ss >> nnInput[i];
                }

                //std::reverse(nnInput.begin(), nnInput.end());
            }


            {
                //std::stringstream ss("0 0 0 0 0 0 0 9.37432e-05 0.000414275 0.00073915 0.00106265 0.00138284 0.00170352 0.0020285 0.00235203 0.00267221 0.00299662 0.00331765 0.00364101 0.00378548 0 0.00415882 0.00471304 0.00512832 0.00553724 0.0059474 0.00636066 0.00677133 0.00721321 0.00777046 0.00832959 0.00888483 0.00944644 0.0100079 0.0105653 0.0106171 0 0.0101777 0.00993729 0.00930828 0.00868483 0.00806144 0.00743602 0.00681598 0.00626522 0.00578593 0.0053063 0.00482644 0.0043425 0.00386213 0.00337774 0.00290176 0.00238477 0.00184378 0.00130703 0.000774488 0.000238568 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 6.7234e-05 0.00052321 0.000986218 0.00144875 0.00191116 0.00236976 0.00282443 0.00266767 0.00221241 0.00174892 0.00128865 0.00082767 0 0 0 0 ");

                for(std::size_t i(0); i<nnOutput.size(); ++i)
                {
                    nnOutput[i] = spectra.data(250, i);
                    //ss >> nnOutput[i];
                }
            }

            //if(!(frame % 10000))
            {
                std::ofstream out("cmp");

                real *vld = fann_test(nn, &nnInput[0], &nnOutput[0]);

                for(std::size_t i(0); i<nnOutput.size(); ++i)
                {
                    out<<nnOutput[i]<<", "<<vld[i]<<std::endl;
                }
                std::cout<<time<<", "<<fann_get_MSE(nn)<<std::endl;
            }

            int k = 220;


        }


        //char fname[1024];
        //sprintf(fname, "out/%06d.png", int(frame));
        //spectra.draw(fname);

        //std::cout<<time<<std::endl;
    }


    return 0;
}
